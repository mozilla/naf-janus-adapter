{"version":3,"sources":["webpack:///webpack/bootstrap f37afe02ef34702be511","webpack:///./src/index.js","webpack:///./node_modules/minijanus/minijanus.js"],"names":[],"mappings":"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","file":"naf-janus-adapter.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap f37afe02ef34702be511","var mj = require(\"minijanus\");\n\nconst ContentKind = {\n  Audio: 1,\n  Video: 2,\n  Data: 4\n};\n\nfunction randomUint() {\n  return Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n}\n\nfunction waitForEvent(target, event) {\n  return new Promise((resolve, reject) => {\n    target.addEventListener(event, e => resolve(e), { once: true });\n  });\n}\n\nasync function getMicrophone() {\n  try {\n    return await navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n  } catch (e) {\n    if (e.name === \"NotAllowedError\") {\n      console.warn(\"Microphone access not allowed.\");\n    } else {\n      console.error(e);\n    }\n  }\n}\n\nconst PEER_CONNECTION_CONFIG = {\n  iceServers: [\n    { urls: \"stun:stun1.l.google.com:19302\" },\n    { urls: \"stun:stun2.l.google.com:19302\" }\n  ]\n};\n\nclass JanusAdapter {\n  constructor() {\n    this.room = null;\n    this.userId = randomUint();\n\n    this.serverUrl = null;\n    this.webRtcOptions = {};\n    this.ws = null;\n    this.session = null;\n\n    this.publisher = null;\n    this.occupants = {};\n    this.occupantPromises = {};\n\n    this.onWebsocketMessage = this.onWebsocketMessage.bind(this);\n    this.onDataChannelMessage = this.onDataChannelMessage.bind(this);\n  }\n\n  setServerUrl(url) {\n    this.serverUrl = url;\n  }\n\n  setApp(app) {}\n\n  setRoom(roomName) {\n    try {\n      this.room = parseInt(roomName);\n    } catch (e) {\n      throw new Error(\"Room must be a positive integer.\");\n    }\n  }\n\n  setWebRtcOptions(options) {\n    this.webRtcOptions = options;\n  }\n\n  setServerConnectListeners(successListener, failureListener) {\n    this.connectSuccess = successListener;\n    this.connectFailure = failureListener;\n  }\n\n  setRoomOccupantListener(occupantListener) {\n    this.onOccupantsChanged = occupantListener;\n  }\n\n  setDataChannelListeners(openListener, closedListener, messageListener) {\n    this.onOccupantConnected = openListener;\n    this.onOccupantDisconnected = closedListener;\n    this.onOccupantMessage = messageListener;\n  }\n\n  connect() {\n    this.ws = new WebSocket(this.serverUrl, \"janus-protocol\");\n    this.session = new mj.JanusSession(this.ws.send.bind(this.ws));\n    this.ws.addEventListener(\"open\", _ => this.onWebsocketOpen());\n    this.ws.addEventListener(\"message\", this.onWebsocketMessage);\n  }\n\n  async onWebsocketOpen() {\n    // Create the Janus Session\n    await this.session.create();\n\n    // Attach the SFU Plugin and create a RTCPeerConnection for the publisher.\n    // The publisher sends audio and opens two bidirectional data channels.\n    // One reliable datachannel and one unreliable.\n    var publisherPromise = this.createPublisher();\n    this.occupantPromises[this.userId] = publisherPromise;\n    this.publisher = await publisherPromise;\n\n    this.connectSuccess(this.userId);\n\n    // Add all of the initial occupants.\n    for (let occupantId of this.publisher.initialOccupants) {\n      if (occupantId !== this.userId) {\n        this.occupantPromises[occupantId] = this.addOccupant(occupantId);\n      }\n    }\n  }\n\n  onWebsocketMessage(event) {\n    var message = JSON.parse(event.data);\n    this.session.receive(message);\n\n    // Handle all of the join and leave events from the publisher.\n    if (message.plugindata && message.plugindata.data) {\n      var data = message.plugindata.data;\n\n      if (data.event === \"join\") {\n        this.occupantPromises[data.user_id] = this.addOccupant(data.user_id);\n      } else if (data.event && data.event === \"leave\") {\n        this.removeOccupant(data.user_id);\n      }\n    }\n  }\n\n  async addOccupant(occupantId) {\n    var subscriber = await this.createSubscriber(occupantId);\n    // Call the Networked AFrame callbacks for the new occupant.\n    this.onOccupantConnected(occupantId);\n    this.occupants[occupantId] = true;\n    this.onOccupantsChanged(this.occupants);\n    return subscriber;\n  }\n\n  removeOccupant(occupantId) {\n    if (this.occupants[occupantId]) {\n      delete this.occupants[occupantId];\n      // Call the Networked AFrame callbacks for the removed occupant.\n      this.onOccupantDisconnected(occupantId);\n      this.onOccupantsChanged(this.occupants);\n    }\n  }\n\n  async createPublisher() {\n    var handle = new mj.JanusPluginHandle(this.session);\n    await handle.attach(\"janus.plugin.sfu\");\n\n    var peerConnection = new RTCPeerConnection(PEER_CONNECTION_CONFIG);\n\n    peerConnection.addEventListener(\"icecandidate\", event => {\n      handle.sendTrickle(event.candidate);\n    });\n\n    // Create an unreliable datachannel for sending and receiving component updates, etc.\n    var unreliableChannel = peerConnection.createDataChannel(\"unreliable\", {\n      ordered: false,\n      maxRetransmits: 0\n    });\n    unreliableChannel.addEventListener(\"message\", this.onDataChannelMessage);\n\n    // Create a reliable datachannel for sending and recieving entity instantiations, etc.\n    var reliableChannel = peerConnection.createDataChannel(\"reliable\", {\n      ordered: true\n    });\n    reliableChannel.addEventListener(\"message\", this.onDataChannelMessage);\n\n    var mediaStream;\n    if (this.webRtcOptions.audio) {\n      mediaStream = await getMicrophone();\n\n      if (mediaStream) {\n        peerConnection.addStream(mediaStream);\n      }\n    }\n\n    var offer = await peerConnection.createOffer();\n    await peerConnection.setLocalDescription(offer);\n\n    var answer = await handle.sendJsep(offer);\n    await peerConnection.setRemoteDescription(answer.jsep);\n\n    // Wait for the reliable datachannel to be open before we start sending messages on it.\n    await waitForEvent(reliableChannel, \"open\");\n\n    // Send join message to janus. Listen for join/leave messages. Automatically subscribe to all users' WebRTC data.\n    var message = await this.sendJoin(handle, this.room, this.userId, {notifications: true, data: true});\n\n    var initialOccupants = message.plugindata.data.response.users[this.room];\n\n    return {\n      handle,\n      initialOccupants,\n      reliableChannel,\n      unreliableChannel,\n      mediaStream,\n      peerConnection\n    };\n  }\n\n  async createSubscriber(occupantId) {\n    var handle = new mj.JanusPluginHandle(this.session);\n    await handle.attach(\"janus.plugin.sfu\");\n\n    var peerConnection = new RTCPeerConnection(PEER_CONNECTION_CONFIG);\n\n    peerConnection.addEventListener(\"icecandidate\", event => {\n      handle.sendTrickle(event.candidate);\n    });\n\n    var offer = await peerConnection.createOffer({\n      offerToReceiveAudio: true\n    });\n\n    await peerConnection.setLocalDescription(offer);\n    var answer = await handle.sendJsep(offer);\n    await peerConnection.setRemoteDescription(answer.jsep);\n\n    // Send join message to janus. Don't listen for join/leave messages. Subscribe to the occupant's audio stream.\n    await this.sendJoin(handle, this.room, this.userId, { notifications: false, media: occupantId });\n\n    // Get the occupant's audio stream.\n    var streams = peerConnection.getRemoteStreams();\n    var mediaStream = streams.length > 0 ? streams[0] : null;\n\n    return {\n      handle,\n      mediaStream,\n      peerConnection\n    };\n  }\n\n  sendJoin(handle, roomId, userId, subscribe) {\n    return handle.sendMessage({\n      kind: \"join\",\n      room_id: roomId,\n      user_id: userId,\n      subscribe\n    });\n  }\n\n  onDataChannelMessage(event) {\n    var message = JSON.parse(event.data);\n\n    if (message.dataType) {\n      this.onOccupantMessage(null, message.dataType, message.data);\n    }\n  }\n\n  shouldStartConnectionTo(clientId) {\n    return true;\n  }\n\n  startStreamConnection(clientId) {}\n\n  closeStreamConnection(clientId) {}\n\n  getConnectStatus(clientId) {\n    if (this.occupants[clientId]) {\n      return NAF.adapters.IS_CONNECTED;\n    } else {\n      return NAF.adapters.NOT_CONNECTED;\n    }\n  }\n\n  getMediaStream(clientId) {\n    var occupantPromise = this.occupantPromises[clientId];\n\n    if (!occupantPromise) {\n      return Promise.reject(\n        new Error(`Subscriber for client: ${clientId} does not exist.`)\n      );\n    }\n\n    return occupantPromise.then(s => s.mediaStream);\n  }\n\n  enableMicrophone(enabled) {\n    if (this.publisher && this.publisher.mediaStream) {\n      var audioTracks = this.publisher.mediaStream.getAudioTracks();\n\n      if (audioTracks.length > 0) {\n        audioTracks[0].enabled = enabled;\n      }\n    }\n  }\n\n  sendData(clientId, dataType, data) {\n    this.publisher.unreliableChannel.send(\n      JSON.stringify({ clientId, dataType, data })\n    );\n  }\n\n  sendDataGuaranteed(clientId, dataType, data) {\n    this.publisher.reliableChannel.send(\n      JSON.stringify({ clientId, dataType, data })\n    );\n  }\n\n  broadcastData(dataType, data) {\n    this.publisher.unreliableChannel.send(JSON.stringify({ dataType, data }));\n  }\n\n  broadcastDataGuaranteed(dataType, data) {\n    this.publisher.reliableChannel.send(JSON.stringify({ dataType, data }));\n  }\n}\n\nNAF.adapters.register(\"janus\", JanusAdapter);\n\nmodule.exports = JanusAdapter;\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","/** Whether to log information about incoming and outgoing Janus signals. **/\nvar verbose = false;\n\n/**\n * Represents a handle to a single Janus plugin on a Janus session. Each WebRTC connection to the Janus server will be\n * associated with a single handle. Once attached to the server, this handle will be given a unique ID which should be\n * used to associate it with future signalling messages.\n *\n * See https://janus.conf.meetecho.com/docs/rest.html#handles.\n **/\nfunction JanusPluginHandle(session) {\n  this.session = session;\n  this.id = undefined;\n}\n\n/** Attaches this handle to the Janus server and sets its ID. **/\nJanusPluginHandle.prototype.attach = function(plugin) {\n  var payload = { janus: \"attach\", plugin: plugin, \"force-bundle\": true, \"force-rtcp-mux\": true };\n  return this.session.send(payload).then(resp => {\n    this.id = resp.data.id;\n    return resp;\n  });\n};\n\n/** Detaches this handle. **/\nJanusPluginHandle.prototype.detach = function() {\n  return this.send({ janus: \"detach\" });\n};\n\n/**\n * Sends a signal associated with this handle. Signals should be JSON-serializable objects. Returns a promise that will\n * be resolved or rejected when a response to this signal is received, or when no response is received within the\n * session timeout.\n **/\nJanusPluginHandle.prototype.send = function(signal) {\n  return this.session.send(Object.assign({ handle_id: this.id }, signal));\n};\n\n/** Sends a plugin-specific message associated with this handle. **/\nJanusPluginHandle.prototype.sendMessage = function(body) {\n  return this.send({ janus: \"message\", body: body });\n};\n\n/** Sends a JSEP offer or answer associated with this handle. **/\nJanusPluginHandle.prototype.sendJsep = function(jsep) {\n  return this.send({ janus: \"message\", body: {}, jsep: jsep });\n};\n\n/** Sends an ICE trickle candidate associated with this handle. **/\nJanusPluginHandle.prototype.sendTrickle = function(candidate) {\n  return this.send({ janus: \"trickle\",  candidate: candidate });\n};\n\n/**\n * Represents a Janus session -- a Janus context from within which you can open multiple handles and connections. Once\n * created, this session will be given a unique ID which should be used to associate it with future signalling messages.\n *\n * See https://janus.conf.meetecho.com/docs/rest.html#sessions.\n **/\nfunction JanusSession(output, options) {\n  this.output = output;\n  this.id = undefined;\n  this.nextTxId = 0;\n  this.txns = {};\n  this.options = options || {\n    timeoutMs: 10000,\n    keepaliveMs: 30000\n  };\n}\n\n/** Creates this session on the Janus server and sets its ID. **/\nJanusSession.prototype.create = function() {\n  return this.send({ janus: \"create\" }).then(resp => {\n    this.id = resp.data.id;\n    return resp;\n  });\n};\n\n/** Destroys this session. **/\nJanusSession.prototype.destroy = function() {\n  return this.send({ janus: \"destroy\" });\n};\n\n/**\n * Whether this signal represents an error, and the associated promise (if any) should be rejected.\n * Users should override this to handle any custom plugin-specific error conventions.\n **/\nJanusSession.prototype.isError = function(signal) {\n  return signal.janus === \"error\";\n};\n\n/**\n * Callback for receiving JSON signalling messages pertinent to this session. If the signals are responses to previously\n * sent signals, the promises for the outgoing signals will be resolved or rejected appropriately with this signal as an\n * argument.\n *\n * External callers should call this function every time a new signal arrives on the transport; for example, in a\n * WebSocket's `message` event, or when a new datum shows up in an HTTP long-polling response.\n **/\nJanusSession.prototype.receive = function(signal) {\n  if (module.exports.verbose) {\n    console.debug(\"Incoming Janus signal: \", signal);\n  }\n  if (signal.transaction != null) {\n    var handlers = this.txns[signal.transaction];\n    if (signal.janus === \"ack\" && signal.hint) {\n      // this is an ack of an asynchronously-processed request, we should wait\n      // to resolve the promise until the actual response comes in\n    } else if (handlers != null) {\n      if (handlers.timeout != null) {\n        clearTimeout(handlers.timeout);\n      }\n      delete this.txns[signal.transaction];\n      (this.isError(signal) ? handlers.reject : handlers.resolve)(signal);\n    }\n  }\n};\n\n/**\n * Sends a signal associated with this session. Signals should be JSON-serializable objects. Returns a promise that will\n * be resolved or rejected when a response to this signal is received, or when no response is received within the\n * session timeout.\n **/\nJanusSession.prototype.send = function(signal) {\n  if (this.id != null) { // this.id is undefined in the special case when we're sending the session create message\n    signal = Object.assign({ session_id: this.id }, signal);\n  }\n  signal = Object.assign({ transaction: (this.nextTxId++).toString() }, signal);\n  if (module.exports.verbose) {\n    console.debug(\"Outgoing Janus signal: \", signal);\n  }\n  return new Promise((resolve, reject) => {\n    var timeout = null;\n    if (this.options.timeoutMs) {\n      timeout = setTimeout(() => {\n        delete this.txns[signal.transaction];\n        reject(new Error(\"Signalling message timed out.\"));\n      }, this.options.timeoutMs);\n    }\n    this.txns[signal.transaction] = { resolve: resolve, reject: reject, timeout: timeout };\n    this.output(JSON.stringify(signal));\n    this._resetKeepalive();\n  });\n};\n\nJanusSession.prototype._resetKeepalive = function() {\n  if (this.keepaliveTimeout) {\n    clearTimeout(this.keepaliveTimeout);\n  }\n  if (this.options.keepaliveMs) {\n    this.keepaliveTimeout = setTimeout(() => this._keepalive(), this.options.keepaliveMs);\n  }\n};\n\nJanusSession.prototype._keepalive = function() {\n  return this.send({ janus: \"keepalive\" });\n};\n\nmodule.exports = {\n  JanusPluginHandle,\n  JanusSession,\n  verbose\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/minijanus/minijanus.js\n// module id = 1\n// module chunks = 0"],"sourceRoot":""}